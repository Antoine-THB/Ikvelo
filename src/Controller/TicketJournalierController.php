<?php

namespace App\Controller;

use App\Entity\Config;
use App\Entity\TicketJournalier;
use App\Form\TicketJournalierType;
use App\Libs\CalculIndemClass;
use App\Libs\CalculIndemTCClass;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;

class TicketJournalierController extends AbstractController
{
    /**
     * @Route("/ticket/journalier", name="ticket_journalier")
     */
    public function index(Request $request)
    {   
        //cette année         
        $maNewdate = new \DateTime();
        $cetteAnnee = $maNewdate->format('Y');

        //recupération du user loggé
        $user = $this->getUser();

        //récupération du salarié
        $salarie = $user->getSalarie();

        $em = $this->getDoctrine()->getManager();

        //recuperation de la situation du salarié par rapport au plafond total
        $situationSalarieTotal = new CalculIndemClass($em,$user->getId(),$cetteAnnee);
        $situationSalarieTC = new CalculIndemTCClass($em,$user->getId(),$cetteAnnee);

        $ticketJournalier = new TicketJournalier();
        $ticketJournalier->setIdSalarie($salarie);
        $ticketJournalier->setDate($maNewdate);

        $form = $this->createForm(TicketJournalierType::class, $ticketJournalier);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            //récupération des données
            $data = $form->getData();
            //gestion de la piece jointe
            $file = $form->get('justificatif')->getData();

            $newFilename = $this->generateUniqueFileName().'.pdf';

            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                    $this->getParameter('brochures_directory'),
                    $newFilename
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
                return $this->render('abonnement/erreur.html.twig');
            }

            // updates the 'brochureFilename' property to store the PDF file name
            // instead of its contents
            $ticketJournalier->setJustificatif($newFilename);

            // ... persist the $product variable or any other work
            $em = $this->getDoctrine()->getManager();

            //Récupération de l'indemnisdation possible
            $indemnisationPossible = $data->getMontant()*$em->getRepository(Config::class)->findOneByLibelle('coef_TC')->getValueNum();
            //condition pour savoir si le salarié travail plus de 50%
            if($salarie->getTpsTravail()<=49){
                $indemnisationPossible = $indemnisationPossible*$salarie->getTpsTravail()/100;
            }
            
            //Condition si disponible TC
            if($indemnisationPossible<$situationSalarieTC->getMontantRestant()){
                //condition si dispo total
                if($indemnisationPossible<$situationSalarieTotal->getMontantRestant()){
                    $ticketJournalier->setIndemnisation($indemnisationPossible); 
                }
                else{
                    $ticketJournalier->setIndemnisation($situationSalarieTotal->getMontantRestant()); 
                }
            }
            else{
                if($situationSalarieTC->getMontantRestant()<$situationSalarieTotal->getMontantRestant()){
                    $ticketJournalier->setIndemnisation($situationSalarieTC->getMontantRestant()); 
                    }
                    else{
                        $ticketJournalier->setIndemnisation($situationSalarieTotal->getMontantRestant()); 
                    }
            }
            
            
            $em->persist($ticketJournalier);
            $em->flush();
            return $this->redirectToRoute('ticket_show', array('id' => $ticketJournalier->getId()));
            
        }

        return $this->render('ticket_journalier/index.html.twig', [
            'form' => $form->createView(),
        ]);
    }
    
    
    /**
     * @Route("/ticket/show/{id}", name="ticket_show")
     */
    public function show(TicketJournalier $ticketJournalier)
    {

        return $this->render('ticket_journalier/show.html.twig', array(
            'ticket' => $ticketJournalier,
        ));
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
