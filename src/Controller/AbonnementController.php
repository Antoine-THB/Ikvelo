<?php

namespace App\Controller;

use App\Entity\Abonnement;
use App\Entity\Config;
use App\Form\AbonnementType;
use App\Libs\CalculIndemClass;
use App\Libs\CalculIndemTCClass;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\File\Exception\FileException;

class AbonnementController extends AbstractController
{
    /**
     * @Route("/abonnement", name="abonnement")
     */
    public function index(Request $request)
    {   
        //cette année         
        $maNewdate = new \DateTime();
        $cetteAnnee = $maNewdate->format('Y');

        //recupération du user loggé
        $user = $this->getUser();

        //récupération du salarié
        $salarie = $user->getSalarie();

        $em = $this->getDoctrine()->getManager();
        //recuperation de la situation du salarié par rapport au plafond total
        $situationSalarieTotal = new CalculIndemClass($em,$user->getId(),$cetteAnnee);
        //recuperation de la situation du salarié par rapport au plafond transport en commun
        $situationSalarieTC = new CalculIndemTCClass($em,$user->getId(),$cetteAnnee);


        $abonnement = new Abonnement();
        $abonnement->setIdSalarie($salarie->getId());
        $form = $this->createForm(AbonnementType::class, $abonnement);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            //récupération des données
            $data = $form->getData();
            //gestion de la piece jointe
            $file = $form->get('justificatif')->getData();

            $newFilename = $this->generateUniqueFileName().'.pdf';

            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                    $this->getParameter('brochures_directory'),
                    $newFilename
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
                return $this->render('abonnement/erreur.html.twig');
            }

            // updates the 'brochureFilename' property to store the PDF file name
            // instead of its contents
            $abonnement->setJustificatif($newFilename);

            // ... persist the $product variable or any other work
            $em = $this->getDoctrine()->getManager();

            //Récupération de l'indemnisdation possible
            $indemnisation = $data->getMontant()*$em->getRepository(Config::class)->findOneByLibelle('coef_TC')->getValueNum();
            //Condition si disponible TC
            if($indemnisation<$situationSalarieTC->getMontantRestant()){
                //condition si dispo total
                if($indemnisation<$situationSalarieTotal->getMontantRestant()){
                   $abonnement->setIndemnisation($indemnisation); 
                }
                else{
                    $abonnement->setIndemnisation($situationSalarieTotal->getMontantRestant()); 
                }
            }
            else{
                if($situationSalarieTC->getMontantRestant()<$situationSalarieTotal->getMontantRestant()){
                    $abonnement->setIndemnisation($situationSalarieTC->getMontantRestant()); 
                 }
                 else{
                     $abonnement->setIndemnisation($situationSalarieTotal->getMontantRestant()); 
                 }
            }
            
            $em->persist($abonnement);
            $em->flush();
            return $this->redirectToRoute('abonnement_show', array('id' => $abonnement->getId()));
            
        }

        return $this->render('abonnement/index.html.twig', [
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/abonnement/show/{id}", name="abonnement_show")
     */
    public function show(Abonnement $abonnement)
    {

        return $this->render('abonnement/show.html.twig', array(
            'abonnement' => $abonnement,
        ));
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

}
